/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
export type SignupBody = {
  /** @maxLength 255 */
  email: string;
  /**
   * @minLength 8
   * @maxLength 255
   * @pattern ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\w\s]).{8,200}$
   */
  password: string;
  birthday: string;
  turnstileToken: string;
};

export type Signup200LastLogin = unknown | string | string | number;

export type Signup200 = {
  id: string;
  email: string;
  emailVerified: boolean;
  lastLogin: Signup200LastLogin;
};

export type getApiAuthResponse200 = {
  data: void
  status: 200
}
    
export type getApiAuthResponseComposite = getApiAuthResponse200;
    
export type getApiAuthResponse = getApiAuthResponseComposite & {
  headers: Headers;
}

export const getGetApiAuthUrl = () => {


  

  return `/api/auth/`
}

export const getApiAuth = async ( options?: RequestInit): Promise<getApiAuthResponse> => {
  
  const res = await fetch(getGetApiAuthUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getApiAuthResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getApiAuthResponse
}



/**
 * @summary Create an account
 */
export type signupResponse200 = {
  data: Signup200
  status: 200
}
    
export type signupResponseComposite = signupResponse200;
    
export type signupResponse = signupResponseComposite & {
  headers: Headers;
}

export const getSignupUrl = () => {


  

  return `/api/account/signup/`
}

export const signup = async (signupBody: SignupBody, options?: RequestInit): Promise<signupResponse> => {
  
  const res = await fetch(getSignupUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      signupBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: signupResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as signupResponse
}
